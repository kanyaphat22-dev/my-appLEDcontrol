import 'dart:convert';
import 'package:http/http.dart' as http;

class ESP32Service {
  // üß© Map ‡∏Ç‡∏≠‡∏á roomKey -> IP (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏≠‡∏á‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏î‡πâ‡∏ß‡∏¢)
  static final Map<String, String> roomIPs = {
    // ====== ‡∏ä‡∏±‡πâ‡∏ô 5 ======
    'F5_Lift': '192.168.1.101',
    'F5_Hall_1': '192.168.1.102',
    'F5_Hall_2': '192.168.1.102',
    'F5_Corridor_1': '192.168.1.103',
    'F5_Corridor_2': '192.168.1.103',
    '66501': '192.168.1.111',
    '66502': '192.168.1.112',
    '66503': '192.168.1.113',
    '66504': '192.168.1.114',
    '66505': '192.168.1.115',
    '66506': '192.168.1.116',
    '66507': '192.168.1.117',
    '66508': '192.168.1.118',
    '66509': '192.168.1.119',

    // ====== ‡∏ä‡∏±‡πâ‡∏ô 6 ======
    'F6_Lift': '192.168.1.201',
    'F6_Hall_1': '192.168.1.202',
    'F6_Hall_2': '192.168.1.202',
    'F6_Corridor_1': '192.168.1.203',
    'F6_Corridor_2': '192.168.1.203',
    '66601': '192.168.1.211',
    '66602': '192.168.1.212',
    '66603': '192.168.1.213',
    '66604': '192.168.1.214',
    '66605': '192.168.1.215',
    '66606': '192.168.1.216',
    '66607': '192.168.1.217',
    '66608': '192.168.1.218',
    '66609': '192.168.1.219',

    // ====== ‡∏ä‡∏±‡πâ‡∏ô 7 ======
    'F7_Lift': '192.168.1.301',
    'F7_Hall_1': '192.168.1.302',
    'F7_Hall_2': '192.168.1.302',
    'F7_Corridor_1': '192.168.1.303',
    'F7_Corridor_2': '192.168.1.303',
    '66701': '192.168.1.311',
    '66702': '192.168.1.312',
    '66703': '192.168.1.313',
    '66704': '192.168.1.314',
    '66705': '192.168.1.315',
    '66706': '192.168.1.316',
    '66707': '192.168.1.317',
    '66708': '192.168.1.318',
    '66709': '192.168.1.319',

    // ====== ‡∏ä‡∏±‡πâ‡∏ô 8 ======
    'F8_Lift': '192.168.1.401',
    'F8_Hall_1': '192.168.1.402',
    'F8_Hall_2': '192.168.1.402',
    'F8_Corridor_1': '192.168.1.403',
    'F8_Corridor_2': '192.168.1.403',
    '66801': '192.168.1.411',
    '66802': '192.168.1.412',
    '66803': '192.168.1.413',
    '66804': '192.168.1.414',
    '66805': '192.168.1.415',
    '66806': '192.168.1.416',
    '66807': '192.168.1.417',
    '66808': '192.168.1.418',
    '66809': '192.168.1.419',

    // ====== ‡∏ä‡∏±‡πâ‡∏ô 9 ======
    'F9_Lift': '192.168.1.501',
    'F9_Hall_1': '192.168.1.502',
    'F9_Hall_2': '192.168.1.502',
    'F9_Corridor_1': '192.168.1.503',
    'F9_Corridor_2': '192.168.1.503',
    '66901': '192.168.1.511',
    '66902': '192.168.1.512',
    '66903': '192.168.1.513',
    '66904': '192.168.1.514',
    '66905': '192.168.1.515',
    '66906': '192.168.1.516',
    '66907': '192.168.1.517',
    '66908': '192.168.1.518',
    '66909': '192.168.1.519',

    // ====== ‡∏ä‡∏±‡πâ‡∏ô 10 ======
    'F10_Lift': '192.168.1.601',
    'F10_Hall_1': '192.168.1.602',
    'F10_Hall_2': '192.168.1.602',
    'F10_Corridor_1': '192.168.1.603',
    'F10_Corridor_2': '192.168.1.603',
    '661001': '192.168.1.611',
    '661002': '192.168.1.612',
    '661003': '192.168.1.613',
    '661004': '192.168.1.614',
    '661005': '192.168.1.615',
    '661006': '192.168.1.616',
    '661007': '192.168.1.617',
    '661008': '192.168.1.618',
    '661009': '192.168.1.619',
  };

  // ====== ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÑ‡∏ü ======
  static Future<void> sendCommand(String roomKey, bool turnOn) async {
    final ip = roomIPs[roomKey];
    if (ip == null) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö IP ‡∏Ç‡∏≠‡∏á $roomKey');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà 1 ‡∏´‡∏£‡∏∑‡∏≠ 2
    final isSwitch2 = roomKey.endsWith('_2');
    final index = isSwitch2 ? '2' : '1';
    final command = turnOn ? 'on$index' : 'off$index';

    final url = 'http://$ip/$command';
    print('üåê ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà $url');

    try {
      final response = await http.get(Uri.parse(url)).timeout(const Duration(seconds: 3));
      if (response.statusCode == 200) {
        print('‚úÖ ‡∏™‡πà‡∏á $command ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ($roomKey ‚Üí $ip)');
      } else {
        print('‚ö†Ô∏è ESP32 ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö status: ${response.statusCode}');
      }
    } catch (e) {
      print('üö´ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP32 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ($roomKey): $e');
    }
  }

  // ====== ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å ESP32 ======
  static Future<bool> getLightStatus(String roomKey) async {
    final ip = roomIPs[roomKey];
    if (ip == null) {
      print('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö IP ‡∏Ç‡∏≠‡∏á $roomKey');
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≠‡∏î‡∏ó‡∏µ‡πà 1 ‡∏´‡∏£‡∏∑‡∏≠ 2
    final isSwitch2 = roomKey.endsWith('_2');
    final index = isSwitch2 ? '2' : '1';
    final url = 'http://$ip/status$index';

    try {
      final response = await http.get(Uri.parse(url)).timeout(const Duration(seconds: 3));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final status = data['lightOn'] as bool? ?? false;
        print('üí° $roomKey ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü: ${status ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}');
        return status;
      } else {
        print('‚ö†Ô∏è ESP32 ($roomKey) ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö status: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('üö´ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü $roomKey: $e');
      return false;
    }
  }
}
